<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Think]]></title>
  <link href="http://blog.asif.in/atom.xml" rel="self"/>
  <link href="http://blog.asif.in/"/>
  <updated>2013-03-23T13:56:54-07:00</updated>
  <id>http://blog.asif.in/</id>
  <author>
    <name><![CDATA[Asif Sheikh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The case for buying AAPL (as of 3/5/13)]]></title>
    <link href="http://blog.asif.in/blog/2013/03/22/the-case-for-buying-aapl/"/>
    <updated>2013-03-22T00:00:00-07:00</updated>
    <id>http://blog.asif.in/blog/2013/03/22/the-case-for-buying-aapl</id>
    <content type="html"><![CDATA[<p><em><strong>Disclaimers</strong>: (1) I own some AAPL stock. (2) I have no inside information on Apple, Google, Microsoft, Amazon or any other company mentioned below. (3) This blog post should NOT be considered as investment advice.</em></p>

<p><em><strong>Context</strong>: I originally wrote this in an email to a friend a few weeks back, who suggested I should widen this to a larger audience. At that time (3/5/13), AAPL was at 432. I know it has gone up since then (461 as of 3/22/13, yesterday), but I am too lazy to update the numbers below. I believe my analysis remains valid at 461 as well.</em></p>

<hr />

<p>As of March 5, Apple&#8217;s PE ratio is 9.75 (@432). If you take out their cash holdings of $137bn (at 2012 year end, probably more by now), their effective PE ratio is 6.4. That is, <strong>at the current price and income rate, you will earn back your entire AAPL investment in cash in 6.4 yrs</strong>. Sounds super cheap to me. In comparison, Apple&#8217;s main competitors, Google is at 25.7 and Microsoft is at 15.5. They also hold substantial cash, but nowhere close to AAPL.</p>

<p>So, the only way I can think of where the above fails (on a relative fundamentals comparison) is if Apple&#8217;s earnings go down substantially, and Google/Microsoft&#8217;s earnings go up substantially.</p>

<p>On Google, I might be biased since I work there, but I think the near future is quite positive. And Google is making very diverse bets on the future (Fiber, self-driving cars, Glass&#8230;), so the future seems bright overall. Though its handling of the Google Reader shutdown gives me some small concern.</p>

<p>Microsoft, I am not so sure. If their tablet fails (and it hasn&#8217;t done well so far, but it&#8217;s only the first iteration, they have a couple more years to get this right), then they are in deep trouble. They won&#8217;t die suddenly, but will turn into an IBM. Almost to prove my point, MSFT has almost the exact same market cap as IBM right now.</p>

<p>So, on to AAPL&#8217;s future earnings&#8230;</p>

<ul>
<li><p><strong>Apple&#8217;s main earnings are from the iPhone, and I don&#8217;t think that&#8217;s going to go down substantially in the US</strong>. They won&#8217;t likely capture any much market share from Android, but they won&#8217;t lose too much also. Both devices/OSes are frankly &#8220;good enough&#8221; for most of the population, are both miles above Blackberry/Nokia at the moment, and given resistance to change, the majority non-power users will continue to use whatever they started with. MSFT actually has a decently good OS, but its probably too late for them, the developers are building the cool apps only for iPhone and Android.</p></li>
<li><p>On tablets, at the moment, the iPad rules in market share, but that&#8217;s likely going to change. Android tablets, particularly the Nexus, are very good. I like my Nexus 7 more than my iPad, but I hate it&#8217;s battery life. Microsoft&#8217;s best chance for the future is here, since the tablet market is still in its infancy. But it&#8217;s going to grow substantially in the future, as for a lot of people, tablets will be good enough for their actual computing usage, and they won&#8217;t buy a new computer once their old one expires (bad for MSFT). <strong>So, on tablets, AAPL will definitely lose market share in the US, but the overall market is likely to grow so much more that their earnings from iPads should actually increase in dollar amount</strong>.</p></li>
</ul>


<p>The other AAPL divisions don&#8217;t make a ton of money compared to the iPhone+iPad, but there are 2 dark horses&#8230;</p>

<ul>
<li><p><strong>International sales</strong>: The iPhone might no longer be cool in the US or Europe, but oh it&#8217;s cool in China and India. And while it&#8217;s an expensive device, it&#8217;s actually in the same price range as the high-end phones that people were already buying in those markets. <strong>People have money, and the iPhone is a status symbol, the only bottleneck has been Apple itself</strong>. They don&#8217;t have enough stores there, and I believe there is a huge markup over the US unsubsidized price (for a product that&#8217;s made in China!), which makes no sense. But those are easily fixable problems. They just have to build more stores while maintaining the &#8220;Apple store experience&#8221;, and they are doing that.</p></li>
<li><p><strong>Apple TV and a &#8220;real Apple TV&#8221;</strong>: I am actually less optimistic about this one since there are too many unknowns, and this needs creativity and not just execution (which Tim Cook is definitely good at). So with Steve Jobs gone, Cook+Ive will have to prove themselves here. And for whatever reason, they don&#8217;t market the current Apple TV at all. But they have a chance of killing the market on this one. Think about an Apple TV which is also a DVR, supports Airplay from any device (not just iDevices), supports more/new channels, makes it easy for you buy any content with one click from iTunes, and is configurable from the internet. Wouldn&#8217;t you be willing to pay $200 for this? And it&#8217;s so easy for them to execute on this. All they have to do is to open up the Airplay and channel APIs to third-party developers, and they are almost there. The DVR part will need more work, but they have enough experience with Macbooks, so the only real hard work would be to obtain the &#8220;license to DVR&#8221;. But even without the DVR, they can completely kill Roku if they just opened up the API. The only reason I can think of why they haven&#8217;t done so is because they want to release a real TV, and an awesome (and incorrectly named) AppleTV + current generation TVs might be &#8220;good enough&#8221; for most people, so they want to release the real TV first to see how it sells.</p></li>
</ul>


<p>So that&#8217;s my analysis for why AAPL is undervalued. Now, I can&#8217;t be the only one who has thought the above, it&#8217;s all public info anyway. So why aren&#8217;t others buying AAPL? Why is the stock languishing at a sub-10 P/E ratio?</p>

<p>One possible reason is market manipulation, but I don&#8217;t really believe that. Market manipulation of such a large cap, widely followed stock sounds unreasonably difficult to sustain for this long. My best alternative explanation is&#8230;</p>

<p>People who agree with the above already own a lot of AAPL stock and they have lost a lot of (paper) money in the past 3-4 months. Some of them may have been forced to sell as well due to mark-to-market issues, driving the price lower for AAPL, but no one wants to add to their already substantial holdings. <strong>Basically, anyone who is optimistic about AAPL, was optimistic over the past 2 years as well and bought a ton of stock in the 500s and 600s, so they are afraid or out of capacity to buy any more</strong>. People who are pessimistic on AAPL have been shorting heavily, and given the lack of support from the buyers, the price keeps going lower.</p>

<p>However, as Apple continues to release strong earnings in future quarters, sentiment will reverse and there might be a big uptick. My price target for Apple is actually a P/E target, but unless something dramatic happens to change my view on the points above, I won&#8217;t consider selling Apple below a 13 P/E (ideally an after-cash-exclusion 9-10 P/E ratio).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google OAuth and Rails]]></title>
    <link href="http://blog.asif.in/blog/2012/03/03/google-oauth-and-rails/"/>
    <updated>2012-03-03T21:04:00-08:00</updated>
    <id>http://blog.asif.in/blog/2012/03/03/google-oauth-and-rails</id>
    <content type="html"><![CDATA[<p>While building <a href="http://www.inboxslasher.com">InboxSlasher</a>, I needed to enable users to give me access to their Gmail accounts via OAuth. The <a href="http://github.com/nfo/gmail_xoauth">gmail_xoauth</a> gem helped me do what I needed once the authentication was set up, but referred to <a href="http://code.google.com/p/google-mail-xoauth-tools/wiki/XoauthDotPyRunThrough">Google&#8217;s python code</a> for generating the actual OAuth tokens. Since I obviously couldn&#8217;t use that from within my Rails app, I translated the Python code to Ruby as shown below.</p>

<p>Note: The Readme on Github for <a href="http://github.com/nfo/gmail_xoauth">gmail_xoauth</a> now has a link to some Sinatra code for the OAuth token generation. I haven&#8217;t checked it out. However, anyone implementing my solution should probably do so. Also, please let me know if that is an easier or better solution, and I will update this post.</p>

<p>Here&#8217;s the code for the OAuth token generator. This is also saved as a <a href="https://gist.github.com/1970639">gist</a>.</p>

<script src="https://gist.github.com/1970639.js?file=ruby_oauth_token_generator.rb"></script>


<h3>How to use this</h3>

<p>1) Save the above into a file that is accessible to your Rails controllers.</p>

<p>2) From the controller where you want to initiate the token generation request (UsersController in my case), call the generate_request_token() method. Save the oauth_token and oauth_token_secret from above into the User&#8217;s model, and redirect the user to oauth_request_url.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">oauth_request_url</span><span class="p">,</span> <span class="n">oauth_token</span><span class="p">,</span> <span class="n">oauth_token_secret</span> <span class="o">=</span> <span class="n">generate_request_token</span><span class="p">()</span>
</span><span class='line'><span class="c1"># save oauth_token and oauth_token_secret to @user</span>
</span><span class='line'><span class="n">redirect_to</span> <span class="n">oauth_request_url</span>
</span></code></pre></td></tr></table></div></figure>


<p>3) Once the user has given your app permission (or refused to do so), Google will send a POST to the callback url that was specified above (see line #56). Modify the following code appropriately to handle the callback.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">OauthController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">authenticate</span>
</span><span class='line'>      <span class="n">oauth_token</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:oauth_token</span><span class="o">]</span>
</span><span class='line'>      <span class="n">oauth_verifier</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:oauth_verifier</span><span class="o">]</span>
</span><span class='line'>      
</span><span class='line'>      <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_oauth_token</span><span class="p">(</span><span class="n">oauth_token</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">!</span><span class="vi">@user</span>
</span><span class='line'>          <span class="c1"># Do something appropriate, such as a 404</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="k">begin</span>
</span><span class='line'>              <span class="n">oauth_tokens</span> <span class="o">=</span> <span class="n">get_access_token</span><span class="p">(</span><span class="n">oauth_token</span><span class="p">,</span> <span class="vi">@user</span><span class="o">.</span><span class="n">oauth_token_secret</span><span class="p">,</span> <span class="n">oauth_verifier</span><span class="p">)</span>
</span><span class='line'>              <span class="c1"># Update @user, save oauth_tokens in the database (in a secure way)</span>
</span><span class='line'>          <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>              <span class="c1"># Something went wrong, or user did not give you permissions on Gmail</span>
</span><span class='line'>              <span class="c1"># Do something appropriate, potentially try again?</span>
</span><span class='line'>              <span class="n">flash</span><span class="o">[</span><span class="ss">:error</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;There was an error while authenticating with Gmail. Please try again.&quot;</span>
</span><span class='line'>          <span class="k">end</span>          
</span><span class='line'>          <span class="n">redirect_to</span> <span class="n">root_url</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If everything above worked fine, you should now have the user&#8217;s oauth_token and oauth_token_secret for Gmail. Use the <a href="http://github.com/nfo/gmail_xoauth">gmail_xoauth</a> gem for the rest of your work.</p>

<h3>Notes:</h3>

<ol>
<li>I used &#8216;anonymous&#8217; for the consumer token and secret. If you have a consumer token and secret from Google, you should use that instead.</li>
<li>If you need access to more Google services and not just Gmail, add them to params[&#8216;scope&#8217;] on line #58.</li>
<li>I had to define my own method for URL escaping since CGI.escape was converting spaces into &#8216;+&#8217; instead of &#8216;%20&#8217;, which was causing me problems. I am not sure what is the right approach here.</li>
<li>I have not find a way to specify the email address of the user when requesting the oauth token. The above methodology asks the user for permission to whichever Google account they are currently signed in on their browser, which in some cases (such as if a user gave you an email address they want to use, but are signed in as a different one), can be a problem. Google&#8217;s permission page does allow the user to log out and back in as the desired user, but people might not notice that. If someone knows a way to specifying the email account during the token generation, please let me know about it.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gentleman's game]]></title>
    <link href="http://blog.asif.in/blog/2012/02/24/gentlemans-game/"/>
    <updated>2012-02-24T00:21:00-08:00</updated>
    <id>http://blog.asif.in/blog/2012/02/24/gentlemans-game</id>
    <content type="html"><![CDATA[<p>From the <a href="http://news.ycombinator.com/item?id=3587730">Hacker News discussion</a> of an excellent <a href="http://www.realdanlyons.com/blog/2012/02/13/hit-men-click-whores-and-paid-apologists-welcome-to-the-silicon-cesspool/">article</a> by Dan Lyons a.k.a. Fake Steve&#8230;</p>

<p>&#8220;A game can be a gentleman&#8217;s game, but only if we all agree to play it like gentlemen.
There are days we can&#8217;t even disagree like gentlemen here. :-(&#8221;</p>

<p>by <a href="http://news.ycombinator.com/item?id=3588163">rbanffy</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Do]]></title>
    <link href="http://blog.asif.in/blog/2012/01/21/do/"/>
    <updated>2012-01-21T10:57:00-08:00</updated>
    <id>http://blog.asif.in/blog/2012/01/21/do</id>
    <content type="html"><![CDATA[<p>&#8220;Keep moving.&#8221;</p>

<p>&#8220;Finish your work.&#8221;</p>

<p>&#8220;Well done is better than well said.&#8221;</p>

<p>Source: <a href="http://wolfslittlestore.be/ethos/">Wolf&#8217;s little store</a></p>
]]></content>
  </entry>
  
</feed>
